import os
import subprocess
import sys
import torch

def check_cuda_and_env():
    # Check CUDA toolkit installation and version alignment
    cuda_home = os.getenv('CUDA_HOME') or os.getenv('CUDA_PATH')
    if not cuda_home:
        raise EnvironmentError("CUDA toolkit is not installed or CUDA_HOME is not set.")

    print(f"Using CUDA from: {cuda_home}")

    # Ensure PyTorch is compatible with installed CUDA
    if not torch.cuda.is_available():
        raise RuntimeError("CUDA is not available. Check your PyTorch or CUDA installation.")

    print(f"PyTorch version: {torch.__version__}, CUDA version: {torch.version.cuda}")

def activate_conda_env(env_name="sdf"):
    # Try to activate the environment
    try:
        result = subprocess.run(
            f"conda activate {env_name} && echo 'Environment activated'", 
            shell=True, check=True, capture_output=True, text=True
        )
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print("Error activating conda environment:", e.stderr)
        sys.exit(1)

def build_extension(extension_path):
    try:
        print(f"Building extension at {extension_path}")
        subprocess.run(
            [sys.executable, '-m', 'pip', 'install', extension_path], 
            check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"Build failed for {extension_path}. Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # Validate environment and CUDA setup
    check_cuda_and_env()

    # Optional: Activate conda environment if necessary
    activate_conda_env()

    # Build necessary extensions
    build_extension("./raymarching")
    build_extension("./shencoder")
    build_extension("./gridencoder")
    print("All extensions built successfully!")
